// Lightning generator class. This is an actor that can be placed in the world to spawn lightning.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "LSystem.h"
#include "Blueprint/UserWidget.h"
#include "NiagaraComponent.h"
#include "NiagaraFunctionLibrary.h"
#include "PhysicsModel.h"
#include <random>
#include <imgui.h>
#include "LightningGenerator.generated.h"

DECLARE_STATS_GROUP(TEXT("LightningGenerator"), STATGROUP_Lightning, STATCAT_Advanced);
DECLARE_CYCLE_STAT(TEXT("ImGui"), STAT_ImGui, STATGROUP_Lightning);

UCLASS()
class PROCEDURALLIGHTNING_API ALightningGenerator : public AActor
{
	GENERATED_BODY()
	
public:	

	// Sets default values for this actor's properties
	ALightningGenerator();

	// Functions to access L System functionality from Unreal Blueprints.
	// *** //
	UFUNCTION(BlueprintCallable)
	void BuildLSystem();

	UFUNCTION(BlueprintCallable)
	FString GetString();
	// *** //
protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	// The L System and its properties.
	LSystem System;
	FString Axiom;
	TArray<FString> Rules;

	UPROPERTY(BlueprintReadWrite) // Can set no. of iterations via blueprint.
	int Iterations;

	// The physics model, and a boolean to determine whether it is used or not.
	PhysicsModel PModel;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	bool bUsePhysicsModel;

	// The template for the lightning particles that will be spawned.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	UNiagaraSystem* LightningTemplate;

	// The direction that the current lightning segment is travelling in.
	UPROPERTY(BlueprintReadWrite)
	FVector LightningDirection;

	// The position of the current lightning segment.
	UPROPERTY(BlueprintReadWrite)
	FVector DrawPosition;

	// Unreal arrays for directions and positions, effectively functioning as stacks to be pushed and popped. Used to return to previous positions in the L System generated tree.
	// *** //
	UPROPERTY(BlueprintReadWrite)
	TArray<FVector> SavedDirections;

	UPROPERTY(BlueprintReadWrite)
	TArray<FVector> SavedPositions;
	// *** //

	// Properties of the lightning. These can be changed in blueprint.
	// *** //
	UPROPERTY(BlueprintReadWrite)
	int Speed;

	UPROPERTY(BlueprintReadWrite)
	int NumSegments;

	UPROPERTY(BlueprintReadWrite)
	int SegmentsDrawn;

	UPROPERTY(BlueprintReadWrite)
	float SegmentLength;

	UPROPERTY(BlueprintReadWrite)
	float MinSegmentLength;

	UPROPERTY(BlueprintReadWrite)
	float MaxSegmentLength;

	UPROPERTY(BlueprintReadWrite)
	float MinAngleBranch;

	UPROPERTY(BlueprintReadWrite)
	float MaxAngleBranch;

	UPROPERTY(BlueprintReadWrite)
	float MinAngleTurning;

	UPROPERTY(BlueprintReadWrite)
	float MaxAngleTurning;

	UPROPERTY(BlueprintReadWrite)
	float MinWidth;

	UPROPERTY(BlueprintReadWrite)
	float MaxWidth;

	UPROPERTY(BlueprintReadWrite)
	float SpawnInterval;

	UPROPERTY(BlueprintReadWrite)
	float BranchChance;

	UPROPERTY(BlueprintReadWrite)
	float TurnChance;
	
	UPROPERTY(BlueprintReadWrite)
	float BranchWidthMultiplier;
	
	UPROPERTY(BlueprintReadWrite)
	bool bDynamicBranchWidth;

	UPROPERTY(BlueprintReadWrite)
	bool bAnimateLightning;
	// *** //

	// This is the string generated by the L system, but reversed and separated into a char array. 
	// This is used for iterating through the lightning segments in the correct order by popping from the end of the array/stack.
	TArray<TCHAR> ReverseCharArray;
	
	// Shader options
	// *** //
	UPROPERTY(BlueprintReadWrite)
	int ParticleCount;

	UPROPERTY(BlueprintReadWrite)
	float ParticleLifespan;

	UPROPERTY(BlueprintReadWrite)
	float SphereLifespanOffset;

	UPROPERTY(BlueprintReadWrite)
	float ColorIntensity;

	UPROPERTY(BlueprintReadWrite)
	float LSystemJitter;

	UPROPERTY(BlueprintReadWrite)
	float PModelJitter;

	UPROPERTY(BlueprintReadWrite)
	FLinearColor LightningColor;

	UPROPERTY(BlueprintReadWrite)
	FVector SphereScale;
	// *** //

	// Counts the number of segments in the L system's generated string.
	int CountSegments();

	// Unreal timer handle for spawning lightning, and its associated function that it calls to spawn the lightning.
	FTimerHandle SpawnTimerHandle;
	void SpawnLightning();

	// These provide functionality for drawing the lightning generated by the L-system model.
	// *** //
	void DrawSegment();
	void RotateRight();
	void RotateLeft();
	void Save(); 
	void Return();
	// *** //
	
	// Rebuilds the rules used in the L-system.
	void RebuildRules();

	// Array of generated lightning particles, and a method to destroy them.
	TArray<UNiagaraComponent*> SegmentParticles;
	UFUNCTION(BlueprintCallable)
	void DestroyParticles();

	// Whether lightning is currently being drawn.
	bool bIsDrawing;

	// Function for updating the ImGui interface that is used to adjust the parameters of the L-system, physics model, shader and generator.
	void UpdateImGui();

	// ImGui scale and properties displayed in the ImGui menu.
	float ImGuiScale;
	float RenderTime;
	float GenerationTime;
	
	// Whether lightning is automatically generated using the timer.
	UPROPERTY(BlueprintReadWrite)
	bool bAutoGenerate;

	// Whether lightning is 3D.
	UPROPERTY(BlueprintReadWrite)
	bool bIs3DEnabled;

	// Whether the first segment is hidden.
	UPROPERTY(BlueprintReadWrite)
	bool bHideFirstSegment;
	
	void Test100Times();
	float Spawn100Times;
	float Render100Times;

	void Render();
	
public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	
};
